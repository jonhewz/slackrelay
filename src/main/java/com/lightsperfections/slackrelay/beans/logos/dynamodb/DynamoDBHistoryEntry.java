package com.lightsperfections.slackrelay.beans.logos.dynamodb;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.lightsperfections.slackrelay.beans.logos.HistoryEntry;

import java.time.LocalDateTime;

/**
 * Created with IntelliJ IDEA.
 * User: jhughes
 * Date: 12/30/15
 * Time: 9:43 AM
 */
@DynamoDBTable(tableName="HistoryEntry")
public class DynamoDBHistoryEntry implements HistoryEntry {

    // Id is just used for storing in Dynamo. It is not a usable piece of data, and is auto-generated.
    private String id;
    private String userName;
    private LocalDateTime entryTime;
    private String reference;

    public DynamoDBHistoryEntry (String userName, LocalDateTime entryTime, String reference) {
        this.userName = userName;
        this.entryTime = entryTime;
        this.reference = reference;
    }

    @DynamoDBAttribute(attributeName="Id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @Override
    @DynamoDBHashKey(attributeName="UserName")
    public String getUserName() {
        return userName;
    }
    public void setUserName(String userName) {
        this.userName = userName;
    }

    @Override
    @DynamoDBAttribute(attributeName="EntryTime")
    @DynamoDBMarshalling(marshallerClass = LocalDateTimeConverter.class)
    public LocalDateTime getEntryTime() {
        return entryTime;
    }
    public void setEntryTime (LocalDateTime entryTime) {
        this.entryTime = entryTime;
    }

    @Override
    @DynamoDBAttribute(attributeName="Reference")
    public String getReference() {
        return reference;
    }
    public void setReference(String reference) {
        this.reference = reference;
    }

    static public class LocalDateTimeConverter implements DynamoDBMarshaller<LocalDateTime> {

        @Override
        public String marshall(LocalDateTime time) {
            return time.toString();
        }

        @Override
        public LocalDateTime unmarshall(Class<LocalDateTime> dimensionType, String stringValue) {
            return LocalDateTime.parse(stringValue);
        }
    }
}